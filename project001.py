# -*- coding: utf-8 -*-
"""project001

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13HK0vvsLSbFX7LrPERRUQryv5oxt1942
"""

# ‚úÖ STEP 1: Install required packages
!pip install -q scikit-learn pandas numpy nltk pillow pytesseract opencv-python
!apt-get -qq install tesseract-ocr

# ‚úÖ STEP 2: Import libraries
import pandas as pd
import numpy as np
import re
import string
import nltk
import pytesseract
import cv2
from PIL import Image
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score
from google.colab import files
from IPython.display import display, HTML, clear_output

# ‚úÖ STEP 3: Download stopwords
nltk.download('stopwords')
from nltk.corpus import stopwords
stop_words = set(stopwords.words('english'))

# ‚úÖ STEP 4: Define text cleaning function
def clean_text(text):
    text = str(text).lower()
    text = re.sub(r'\d+', '', text)
    text = text.translate(str.maketrans('', '', string.punctuation))
    text = ' '.join([word for word in text.split() if word not in stop_words])
    return text

# ‚úÖ STEP 5: Upload CSV files
print("üìÅ Please upload 'Fake.csv' and 'True.csv'")
uploaded = files.upload()

fake_csv_name = [f for f in uploaded if 'Fake' in f][0]
true_csv_name = [f for f in uploaded if 'True' in f][0]

df_fake = pd.read_csv(fake_csv_name)
df_true = pd.read_csv(true_csv_name)

df_fake['label'] = 0  # FAKE
df_true['label'] = 1  # REAL

# ‚úÖ STEP 6: Combine and clean data
df = pd.concat([df_fake, df_true], ignore_index=True)
df = df.sample(frac=1, random_state=42).reset_index(drop=True)
df['text'] = df['title'].astype(str) + " " + df['text'].astype(str)
df['text'] = df['text'].apply(clean_text)

# ‚úÖ STEP 7: Split dataset
X = df['text']
y = df['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ‚úÖ STEP 8: TF-IDF and model training
vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

model = PassiveAggressiveClassifier(max_iter=50)
model.fit(X_train_tfidf, y_train)

y_pred = model.predict(X_test_tfidf)
accuracy = accuracy_score(y_test, y_pred)
print(f"‚úÖ Model trained! Accuracy: {accuracy*100:.2f}%")

# ‚úÖ STEP 9: Define prediction functions
def predict_text(input_text):
    cleaned = clean_text(input_text)
    vect = vectorizer.transform([cleaned])
    pred = model.predict(vect)[0]
    return "REAL" if pred == 1 else "FAKE"

def extract_text_from_image(image_path):
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    return pytesseract.image_to_string(image)

# ‚úÖ STEP 10: Add user input cell for text
print("\nüìù Enter news article content below:")

import ipywidgets as widgets
text_input = widgets.Textarea(
    value='',
    placeholder='Type or paste news article here...',
    description='News:',
    layout=widgets.Layout(width='100%', height='120px'),
    disabled=False
)
display(text_input)

def on_text_submit(btn):
    clear_output()
    display(text_input, submit_btn)
    result = predict_text(text_input.value)
    print(f"\nüß† Prediction from Text: {result}")

submit_btn = widgets.Button(description="üîç Predict from Text")
submit_btn.on_click(on_text_submit)
display(submit_btn)

4